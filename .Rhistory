testing <- testing - training[ ,dim(training)[2]]
weight.matrices <- make.weight.matrix(trans.EV, testing)
result <- make.gen.imposter(weight.matrices)
plot.scores(result)
rates_data_frame <- plot.DET(result)
get.EER(rates_data_frame)
directory = "/Users/jen/Dropbox/CSCI 454/hw/trainingfaces2"
filenames <- list.files(path = directory)
training <- read.files(filenames, directory)
training <- MMScale(training)
X <- center.data(training)
trans.EV <- calculate.eigens(X, 30)
directory = "/Users/jen/Dropbox/CSCI 454/hw/testingaligned2"
filenames <- list.files(path = directory)
testing <- read.files(filenames, directory)
testing <- MMScale(testing)
testing <- testing - training[ ,dim(training)[2]]
weight.matrices <- make.weight.matrix(trans.EV, testing)
result <- make.gen.imposter(weight.matrices)
plot.scores(result)
rates_data_frame <- plot.DET(result)
get.EER(rates_data_frame)
directory = "/Users/jen/Dropbox/CSCI 454/hw/trainingfaces2"
filenames <- list.files(path = directory)
training <- read.files(filenames, directory)
x.and.y.to.list.index <- function(x, y){
if (x == 0) {
if (y == 0) {
final.index = 1
} else if (y == 1) {
final.index = 2
} else {
final.index = 3
}
} else if (x == 1){
if (y == 0) {
final.index = 4
} else if (y == 1) {
final.index = 5
} else {
final.index = 6
}
} else {
if (y == 0) {
final.index = 7
} else if (y == 1) {
final.index = 8
} else {
final.index = 9
}
}
return(final.index)
}
directory <- "/Users/jen/Dropbox/CSCI 454/hw/trainingfaces2"
filenames <- list.files(path = directory)
x.and.y.to.list.index <- function(x, y){
if (x == 0) {
if (y == 0) {
final.index = 1
} else if (y == 1) {
final.index = 2
} else {
final.index = 3
}
} else if (x == 1){
if (y == 0) {
final.index = 4
} else if (y == 1) {
final.index = 5
} else {
final.index = 6
}
} else {
if (y == 0) {
final.index = 7
} else if (y == 1) {
final.index = 8
} else {
final.index = 9
}
}
return(final.index)
}
read.divide.files <- function(directory, filenames){
dim.img <- 60
one.third <- dim.img[1]/3
len.array <- one.third ** 2
sectors <- array(NA, c(len.array, length(filenames), 9))
for (f in 1:length(filenames)) {
img <- readPNG(paste(directory, filenames[f], sep = "/"))
for (i in 0:2){
min1 <- i*one.third +1
max1 <- min1 + one.third - 1
for (j in 0:2){
min2 <- j * one.third + 1
max2 <- min2 + one.third - 1
current <- img[min1:max1, min2:max2]
to.add <- as.vector(current)
# get index from x and y using helper function
index <- x.and.y.to.list.index(i, j)
# assign using indices
sectors[,f,index] <- to.add
}
}
}
return(sectors)
}
sectors <- read.divide.files(directory, filenames)
dim(sectors)
weights <- array(NA, c(20, len.array, 9))
dim.img <- 60
one.third <- dim.img[1]/3
len.array <- one.third ** 2
read.divide.files <- function(directory, filenames){
sectors <- array(NA, c(len.array, length(filenames), 9))
for (f in 1:length(filenames)) {
img <- readPNG(paste(directory, filenames[f], sep = "/"))
for (i in 0:2){
min1 <- i*one.third +1
max1 <- min1 + one.third - 1
for (j in 0:2){
min2 <- j * one.third + 1
max2 <- min2 + one.third - 1
current <- img[min1:max1, min2:max2]
to.add <- as.vector(current)
# get index from x and y using helper function
index <- x.and.y.to.list.index(i, j)
# assign using indices
sectors[,f,index] <- to.add
}
}
}
return(sectors)
}
sectors <- read.divide.files(directory, filenames)
weights <- array(NA, c(20, len.array, 9))
mean.rows.per.sector <- array(NA, c(len.array, 1 ,9))
for (i in 1:dim(sectors)[3]){
training <- sectors[,,i]
training <- MMScale(training)
# Centering
mean.rows <- apply(training, 1, mean)
training <- cbind(training, mean.rows)
mean.rows.per.sector[,,i] <- mean.rows
X <- training[ , 1:dim(training)[2]-1]-training[ ,dim(training)[2]]
trans.EV <- calculate.eigens(X, 20)
weights[,,i] <- trans.EV
}
directory <- "/Users/jen/Dropbox/CSCI 454/hw/testingfaces2"
filenames <- list.files(path = directory)
sectors <- read.divide.files(directory, filenames)
for (i in 1:dim(sectors)[3]){
testing <- sectors[,,i]
testing <- MMScale(testing)
# Subtract the mean of the training data for that sector
sectors[,,i] <- testing - mean.rows.per.sector[,,i]
}
weights.x.images <- array(NA, c(20, length(filenames), 9))
for (i in 1:dim(sectors)[3]){
current.img <- sectors[,,i]
current.weights <- weights[,,i]
weights.x.images[,,i] <- current.weights %*% current.img
}
true.matches.false.imposters <- c()
for (i in 1:length(filenames)){
j <- i+1
while (j <= length(filenames)){
image1 <- filenames[i]
subject1 <- substr(image1, 2, 3)
image2 <- filenames[j]
subject2 <- substr(image2, 2, 3)
if (subject1 == subject2) {
true.matches.false.imposters <- c(true.matches.false.imposters, TRUE)
} else {
true.matches.false.imposters <- c(true.matches.false.imposters, FALSE)
}
j <- j+1
}
}
distance.scores.to.be.weighted <- c()
for (d in 1:dim(sectors)[3]){
current.col.to.add <- c()
current <- weights.x.images[,,d]
for (i in 1:length(filenames)){
j <- i+1
while (j <= length(filenames)){
weight1 <- current[, i]
weight2 <- current[, j]
weight.diff <- sum(abs(weight1-weight2))
current.col.to.add <- c(current.col.to.add, weight.diff)
j <- j+1
}
}
distance.scores.to.be.weighted <- cbind(distance.scores.to.be.weighted, current.col.to.add)
print(d)
}
weights <- c(1, 2, 1, 2, 2, 2, 1, 2, 1)
weighted.scores <- t(t(distance.scores.to.be.weighted) * weights)
total.score <- apply(weighted.scores, 1, sum)
scores <- data.frame(cbind(true.matches.false.imposters, total.score))
genuine <- scores %>% filter(true.matches.false.imposters == 1) %>% select(total.score)
imposter <- scores %>% filter(true.matches.false.imposters == 0) %>% select(total.score)
theme_update(plot.title = element_text(hjust = 0.5))
imposter <- as.data.frame(imposter)
genuine <- as.data.frame(genuine)
#Scale using the density function and plot using ggplot's geom_freqpoly.
ggplot() + geom_freqpoly(data = imposter, aes(x = total.score, y = ..density..), bins = 50, color = "red") + geom_freqpoly(data = genuine, aes(x = total.score, y = ..density..), bins = 50) + labs(title = "Distribution of Scores") + labs(x = "Match Score", y = "Scaled Frequency")
FAR_vs_FRR <- NULL
for (t in seq(from = 100, to = 400, by = 10)){
false_accept_count <- sum(imposter < t)
false_accept_rate <- false_accept_count/dim(imposter)[1]
false_reject_count <- sum(genuine > t)
false_reject_rate <- false_reject_count/dim(genuine)[1]
current_row <- c(false_accept_rate, false_reject_rate)
FAR_vs_FRR<- rbind(FAR_vs_FRR, current_row)
}
rates_data_frame <- as.data.frame(FAR_vs_FRR)
colnames(rates_data_frame) <- c("FAR", "FRR")
ggplot(rates_data_frame, aes(x=FAR, y = FRR)) + geom_point() + geom_abline(slope = 1, intercept = 0) + labs(title = "DET curve")
rates_data_frame$larger <- rates_data_frame$FAR > rates_data_frame$FRR
far_is_smaller <- rates_data_frame[rates_data_frame$larger=="FALSE", ]
lower_bound <- max(far_is_smaller$FAR)
far_is_larger <- rates_data_frame[rates_data_frame$larger=="TRUE", ]
upper_bound <- min(far_is_larger$FAR)
EER <- mean(lower_bound, upper_bound)
print(EER)
shiny::runApp('Dropbox/MATH 216/final_project/math216_diseases')
library(miniCharts)
library(leaflet.miniCharts)
shiny::runApp('Dropbox/MATH 216/final_project/math216_diseases')
runApp('Dropbox/MATH 216/final_project/math216_diseases')
shiny::runApp('Dropbox/Reference/MATH 216/final_project/math216_diseases')
runApp('Dropbox/Reference/MATH 216/final_project/math216_diseases')
install.packages("VariantAnnotation")
install.packages("VariantAnnotation")
source("https://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation")
library(VariantAnnotation)
warnings()
fl <- system.file("extdata", "chr7-sub.vcf.gz", package = "VariantAnnotation")
fl
vcf1 <- readVcf(fl, "hg19")
View(vcf1)
vcf1
which <- GRanges("7", IRanges(55000723, width = 1000))
param <- ScanVcfParam(which=which)
which
param
vcf2 <- readVcf(fl, "hg19", param = param)
vcf2
dim(vcf2)
param <-ScanVcfParam(info="SS", geno = "GT")
vcf3 <- readVCF(fl, "hg19", param = param)
vcf3 <- readVCF(fl, "hg19", param = param)
vcf3 <- readVcF(fl, "hg19", param = param)
vcf3 <- readVcf(fl, "hg19", param = param)
vcf3
ft <- readGeno(fl, "FT", row.names = FALSE)
class(ft)
dim(ft)
apply(ft, 2, table)
vranges <- readVcfAsVRanges(fl, "hg19", use.names = TRUE)
head(vranges, 4)
help(VariantAnnotation)
??`VariantAnnotation-defunct`
help(system.file)
help("readVcf")
?TabixFile
?write.table
source('~/Desktop/citation-categories/assess_performance.R')
?stop
setwd("~/Desktop/CS702")
suppressMessages(library(tidyverse))
suppressMessages(library(data.table)) # for getting max and keeping class
suppressMessages(library(plyr))
library(textclean) # strip function
library(Hmisc) # capitalize function
observed_file_to_assess <- 'output_data/synthetic_data6/AN_no_sum.txt'
real_file_to_compare <- 'output_data/synthetic_data6/synthetic_data.csv'
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("Allele.ID", "Observed.Class", "Observed.Value"))
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("Allele.ID", "Observed.Class", "Observed.Value"))
View(observed_data)
observed_file_to_assess <- 'output_data/synthetic_data6/no_AN_sum.txt'
View(observed_data)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("Allele.ID", "Observed.Class", "Observed.Value"))
View(observed_data)
real_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
real_file_to_compare <- 'output_data/synthetic_data6/synthetic_testing.csv'
real_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
View(real_data)
View(observed_data)
View(real_data)
observed_file_to_assess <- 'output_data/synthetic_data6/no_AN_sum.txt'
real_file_to_compare <- 'output_data/synthetic_data6/synthetic_testing.csv'
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("Allele.ID", "Observed.Class", "Observed.Value"))
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
View(observed_data)
View(real_testing_data)
observed_data <- as.data.table(observed_data)
max.results <- observed_data[observed_data[, .I[Observed.Value == max(Observed.Value)], by=Allele.ID]$V1]
View(max.results)
126/2
View(observed_data)
target_ids <- real_testing_data %>% select(AlleleID.s.)
target_ids
View(real_testing_data)
observed_targets <- observed_data %>% select(Allele.ID in target_ids)
observed_targets <- merge(real_testing_data, observed_data)
View(observed_targets)
range(observed_targets$AlleleID.s.)
View(observed_data)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
observed_targets <- merge(real_testing_data, observed_data)
observed_targets <- merge(real_testing_data, observed_data)
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$AlleleID.s. <- strip(observed_data$AlleleID.s.)
observed_data$AlleleID.s. <- capitalize(observed_data$AlleleID.s.)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$AlleleID.s. <- strip(observed_data$AlleleID.s.)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$AlleleID.s. <- as.numeric(observed_data$AlleleID.s.)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$AlleleID.s. <- as.numeric(observed_data$AlleleID.s.)
?as.numeric
temp <- observed_data$AlleleID.s.
temp2 <- as.numeric(temp)
temp
temp2
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$temp <- as.numeric(observed_data$AlleleID.s.)
observed_data$temp <- strip(observed_data$AlleleID.s.)
?read.delim
observed_data$temp <- as.numeric(levels(observed_data$AlleleID.s.))[observed_data$AlleleID.s.]
observed_data$temp <- levels(observed_data$AlleleID.s.)
observed_data$temp <- as.numeric(levels(observed_data$AlleleID.s.))
observed_data$temp <- as.numeric(paste(observed_data$AlleleID.s.))
as.numeric(levels(observed_data$AlleleID.s.))[observed_data$AlleleID.s.]
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
observed_data$temp <- as.numeric.factor(observed_data$AlleleID.s.)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$temp <- as.numeric(paste(observed_data$AlleleID.s.))
observed_data$temp <- as.character.factor(observed_data$AlleleID.s.)
observed_data$temp <- strip(observed_data$temp)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$temp <- as.character.factor(observed_data$AlleleID.s.)
?strip
observed_data$temp <- strip(observed_data$temp, digit.remove = FALSE)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_data$temp <- as.character.factor(observed_data$AlleleID.s.)
observed_data$temp2 <- as.numeric(observed_data$temp)
observed_data$temp2 <- as.numeric(paste(observed_data$temp))
View(observed_data)
?as.character.factor
observed_data$temp <- as.character(observed_data$AlleleID.s.)
View(real_testing_data)
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_targets <- merge(real_testing_data, observed_data)
real_testing_data$AlleleID.s. <- as.factor(real_testing_data$AlleleID.s)
observed_targets <- merge(real_testing_data, observed_data)
View(observed_targets)
View(real_testing_data)
real_testing_data$AlleleID.s. <- paste("', real_testing_data$AlleleID.s, "'")
# remove observations
observed_targets <- merge(real_testing_data, observed_data)
# get max values for observed classes
observed_data <- as.data.table(observed_data)
max.results <- observed_data[observed_data[, .I[Observed.Value == max(Observed.Value)], by=Allele.ID]$V1]
# remove results where PSL said 50/50
temp <- results %>% filter(Observed.Value==0.5)
num_exactly_uncertain <- nrow(temp)/2
# get denominators for later
num_targets <- length(unique(results$Allele.ID))
temp <- results %>% filter(Real.Class=="Path")
num_path_targets <- length(unique(temp$Allele.ID))
temp <- results %>% filter(Real.Class=="Benign")
num_benign_targets <- length(unique(temp$Allele.ID))
results <- results %>% filter(Observed.Value!=0.5)
# calculating false positives and false negatives
temp <- results %>% filter(Observed.Class=="Path", Real.Class=="Benign")
num_false_pos <- nrow(temp)
temp <- results %>% filter(Observed.Class=="Benign", Real.Class=="Path")
num_false_neg <- nrow(temp)
false_pos_rate <- num_false_pos/num_benign_targets
false_neg_rate <- num_false_neg/num_path_targets
# sensitivity
# specificity
# PRINTING RESULTS
print("false pos rate")
print(false_pos_rate)
print("false neg rate")
print(false_neg_rate)
observed_file_to_assess <- 'output_data/synthetic_data6/no_AN_sum.txt'
real_file_to_compare <- 'output_data/synthetic_data6/synthetic_testing.csv'
observed_file_to_assess <- 'output_data/synthetic_data6/no_AN_sum.txt'
real_file_to_compare <- 'output_data/synthetic_data6/synthetic_testing.csv'
observed_data <- read.delim(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
real_testing_data$AlleleID.s. <- paste("'", real_testing_data$AlleleID.s, "'")
real_testing_data$AlleleID.s. <- as.factor(paste("'", real_testing_data$AlleleID.s, "'"))
real_testing_data$AlleleID.s. <- as.factor(real_testing_data$AlleleID.s)
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
real_testing_data$AlleleID.s. <- as.factor(real_testing_data$AlleleID.s)
observed_targets <- merge(real_testing_data, observed_data)
observed_data <- read.csv(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
observed_data <- read.table(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
observed_file_to_assess <- 'output_data/synthetic_data6/no_AN_sum.txt'
real_file_to_compare <- 'output_data/synthetic_data6/synthetic_testing.csv'
observed_data <- read.table(observed_file_to_assess, header = FALSE, col.names = c("AlleleID.s.", "Observed.Class", "Observed.Value"))
real_testing_data <- read.csv(real_file_to_compare, header = TRUE, stringsAsFactors = FALSE)
observed_data$Observed.Class <- strip(observed_data$Observed.Class)
observed_data$Observed.Class <- capitalize(observed_data$Observed.Class)
observed_targets <- merge(real_testing_data, observed_data)
View(observed_targets)
observed_targets <- as.data.table(observed_targets)
max.results <- observed_data[observed_data[, .I[Observed.Value == max(Observed.Value)], by=Allele.ID]$V1]
observed_targets <- merge(real_testing_data, observed_data)
max.results <- observed_data[observed_data[, .I[Observed.Value == max(Observed.Value)], by=Allele.ID]$V1]
observed_targets <- as.data.table(observed_targets)
max.results <- observed_targets[observed_targets[, .I[Observed.Value == max(Observed.Value)], by=Allele.ID]$V1]
max.results <- observed_targets[observed_targets[, .I[Observed.Value == max(Observed.Value)], by=AlleleID.s.]$V1]
View(max.results)
84-43
max.results <- max.results %>% filter(!Observed.Value==0.5)
dim(max.results)
num_targets <- nrows(max.results)
num_targets <- nrow(max.results)
num_targets
temp <- results %>% filter(Real.Class=="Path")
num_path_targets <- length(temp$Allele.ID)
temp <- max.results %>% filter(Real.Class=="Path")
num_path_targets <- length(temp$Allele.ID)
temp <- max.results %>% filter(Clinsig=="Path")
num_path_targets <- length(temp$Allele.ID)
clinsig
num_path_targets
max.results <- max.results %>% filter(!Observed.Value==0.5)
temp <- max.results %>% filter(Clinsig=="Path")
num_path_targets <- nrow(temp)
temp <- max.results %>% filter(Clinsig=="Benign")
num_benign_targets <- nrow(temp)
temp <- max.results %>% filter(Observed.Class=="Path", Clinsig=="Benign")
num_false_pos <- nrow(temp)
temp <- max.results %>% filter(Observed.Class=="Benign", Clinsig=="Path")
num_false_neg <- nrow(temp)
false_pos_rate <- num_false_pos/num_benign_targets
false_neg_rate <- num_false_neg/num_path_targets
num_true_pos <- num_path_targets - num_false_neg
num_true_neg <- num_benign_targets - num_false_pos
specificity <- num_true_neg/(num_true_neg + num_false_pos)
sensitivity <- num_true_pos/(num_true_pos + num_false_neg)
num_false_neg
num_false_pos
false_pos_rate
false_neg_rate
num_true_neg = num_benign_targets - num_false-neg
num_true_neg = num_benign_targets - num_false_neg
num_true_neg
num_false_pos
num_benign_targets
temp <- max.results %>% filter(Observed.Class=="Path", Clinsig=="Benign")
num_false_pos <- nrow(temp)
temp <- max.results %>% filter(Observed.Class=="Path", Clinsig=="Path")
num_true_pos <- nrow(temp)
temp <- max.results %>% filter(Observed.Class=="Benign", Clinsig=="Path")
num_false_neg <- nrow(temp)
temp <- max.results %>% filter(Observed.Class=="Benign", Clinsig=="Benign")
num_false_pos <- nrow(temp)
num_false_pos
num_true_pos
num_false_neg
num_false_pos
false_pos_rate <- num_false_pos/(num_false_pos + num_true_neg)
false_neg_rate <- num_false_neg/(num_false_neg + num_true_pos)
print(false_pos_rate)
print(false_neg_rate)
sensitivity <- num_true_pos/(num_true_pos + num_false_neg)
print(specificity)
specificity <- num_true_neg/(num_true_neg + num_false_pos)
print(specificity)
sensitivity <- num_true_pos/(num_true_pos + num_false_neg) * 100
specificity <- num_true_neg/(num_true_neg + num_false_pos) * 100
print("false pos rate")
print(false_pos_rate)
print("false neg rate")
print(false_neg_rate)
print("specificity")
print(specificity)
print("sensitivity")
print(sensitivity)
